// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlatformaRecrutari.Data;

namespace PlatformaRecrutari.Data.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220629102815_AddFinalVoteTables")]
    partial class AddFinalVoteTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FinalVote.Vote", b =>
                {
                    b.Property<string>("VoterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VoterId", "ParticipantId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FinalVote.VotedParticipant", b =>
                {
                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParticipantId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("VotedParticipants");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FinalVote.Voter", b =>
                {
                    b.Property<string>("VolunteerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolunteerId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("Voters");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FormAnswers", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("CandidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId", "CandidateId");

                    b.HasIndex("CandidateId");

                    b.ToTable("FormAnswers");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FormQuestions.BaseQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("SimpleQuestions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseQuestion");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Inputed_Options.InputsOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InputsOptions");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Interviews.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Break")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("InterviewDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Interviews.InterviewSchedule", b =>
                {
                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VolunteerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ParticipantId", "InterviewId");

                    b.HasIndex("InterviewId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("InterviewSchedules");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Participant_Status.FormFeedback", b =>
                {
                    b.Property<string>("CandidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("FeedbackGiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidateId", "FormId");

                    b.HasIndex("FeedbackGiverId");

                    b.HasIndex("FormId");

                    b.ToTable("FormFeedbacks");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Participant_Status.InterviewFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CDVote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DDVote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HRVote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.ToTable("InterviewFeedbacks");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Participant_Status.WorkshopFeedback", b =>
                {
                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.Property<int>("AbstainVotes")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackGiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoVotes")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YesVotes")
                        .HasColumnType("int");

                    b.HasKey("ParticipantId", "WorkshopId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("WorkshopFeedbacks");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.RecruitmentSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("RecruitmentSessions");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Workshops.Workshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Departments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfBoardMembers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDirectors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkshopDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Workshops");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Workshops.WorkshopSchedule", b =>
                {
                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VolunteerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParticipantId", "WorkshopId");

                    b.ToTable("WorkshopSchedules");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FormQuestions.GridQuestion", b =>
                {
                    b.HasBaseType("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FormQuestions.BaseQuestion");

                    b.Property<bool>("OneAnswerPerColumn")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("GridQuestion");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FinalVote.Vote", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.RecruitmentSession", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.User", null)
                        .WithMany()
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FinalVote.VotedParticipant", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.RecruitmentSession", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FinalVote.Voter", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.RecruitmentSession", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.User", null)
                        .WithMany()
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Form", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.RecruitmentSession", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FormAnswers", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.User", null)
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FormQuestions.BaseQuestion", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.FormQuestions.BaseQuestion", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Form", null)
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Interviews.Interview", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.RecruitmentSession", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Interviews.InterviewSchedule", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Interviews.Interview", null)
                        .WithMany()
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.User", null)
                        .WithMany()
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Participant_Status.FormFeedback", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.User", null)
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.User", null)
                        .WithMany()
                        .HasForeignKey("FeedbackGiverId");

                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Form", null)
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Participant_Status.InterviewFeedback", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Interviews.Interview", null)
                        .WithMany()
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Participant_Status.WorkshopFeedback", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Workshops.Workshop", null)
                        .WithMany()
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.RecruitmentSession", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.Workshops.Workshop", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Recruitment_Sessions.RecruitmentSession", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformaRecrutari.Core.BusinessObjects.User", b =>
                {
                    b.HasOne("PlatformaRecrutari.Core.BusinessObjects.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
